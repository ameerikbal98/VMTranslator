//push argument 1
@2
A=M
D=A
@1
A=D+A
D=M
@0
A=M
M=D
D=A+1
@0
M=D
//pop pointer 1
@4
D=A
@addr
M=D
@0
A=M-1
D=M
@addr
A=M
M=D
@0
A=M
A=A-1
D=A
@0
M=D
//push constant 0
@0
D=A
@0
A=M
M=D
D=A+1
@0
M=D
//pop that 0
@4
D=M
@0
D=D+A
@addr
M=D
@0
A=M-1
D=M
@addr
A=M
M=D
@0
A=M
A=A-1
D=A
@0
M=D
//push constant 1
@1
D=A
@0
A=M
M=D
D=A+1
@0
M=D
//pop that 1
@4
D=M
@1
D=D+A
@addr
M=D
@0
A=M-1
D=M
@addr
A=M
M=D
@0
A=M
A=A-1
D=A
@0
M=D
//push argument 0
@2
A=M
D=A
@0
A=D+A
D=M
@0
A=M
M=D
D=A+1
@0
M=D
//push constant 2
@2
D=A
@0
A=M
M=D
D=A+1
@0
M=D
//add
@0
A=M
A=A-1
D=M
A=A-1
M=M-D
A=A+1
D=A
@0
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@addr
M=D
@0
A=M-1
D=M
@addr
A=M
M=D
@0
A=M
A=A-1
D=A
@0
M=D
//label LOOP
(LOOP)
//push argument 0
@2
A=M
D=A
@0
A=D+A
D=M
@0
A=M
M=D
D=A+1
@0
M=D
//if-gotoCOMPUTE_ELEMENT
@0
AM=M-1
D=M
@COMPUTE_ELEMENT
D;JNE
//goto END
@END
0;JMP
//label COMPUTE_ELEMENT
(COMPUTE_ELEMENT)
//push that 0
@4
A=M
D=A
@0
A=D+A
D=M
@0
A=M
M=D
D=A+1
@0
M=D
//push that 1
@4
A=M
D=A
@1
A=D+A
D=M
@0
A=M
M=D
D=A+1
@0
M=D
//add
@0
A=M
A=A-1
D=M
A=A-1
M=D+M
A=A+1
D=A
@0
M=D
//pop that 2
@4
D=M
@2
D=D+A
@addr
M=D
@0
A=M-1
D=M
@addr
A=M
M=D
@0
A=M
A=A-1
D=A
@0
M=D
//push pointer 1
@4
D=M
@0
A=M
M=D
D=A+1
@0
M=D
//push constant 1
@1
D=A
@0
A=M
M=D
D=A+1
@0
M=D
//add
@0
A=M
A=A-1
D=M
A=A-1
M=D+M
A=A+1
D=A
@0
M=D
//pop pointer 1
@4
D=A
@addr
M=D
@0
A=M-1
D=M
@addr
A=M
M=D
@0
A=M
A=A-1
D=A
@0
M=D
//push argument 0
@2
A=M
D=A
@0
A=D+A
D=M
@0
A=M
M=D
D=A+1
@0
M=D
//push constant 1
@1
D=A
@0
A=M
M=D
D=A+1
@0
M=D
//add
@0
A=M
A=A-1
D=M
A=A-1
M=M-D
A=A+1
D=A
@0
M=D
//pop argument 0
@2
D=M
@0
D=D+A
@addr
M=D
@0
A=M-1
D=M
@addr
A=M
M=D
@0
A=M
A=A-1
D=A
@0
M=D
//goto LOOP
@LOOP
0;JMP
//label END
(END)
